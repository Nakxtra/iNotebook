{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\inotebook\\\\src\\\\Context\\\\Notes\\\\NoteState.js\",\n    _s = $RefreshSig$();\n\nimport NoteContext from \"./NoteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  // const s1 = {\n  //     \"name\": \"Nakshatra\",\n  //     \"branch\": \"cse\"\n  // }\n  // const [state, setState] = useState(s1);\n  // const update = ()=>{\n  //     setTimeout(() => {\n  //         setState({\n  //             \"name\": \"Tanu\",\n  //             \"branch\": \"It\"\n  //         })\n  //     }, 1000);\n  // }\n  const host = \"http://localhost:5000\";\n  const notesVal = [];\n\n  const getNotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      // *GET, POST, PUT, DELETE, etc.\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjFiODZlYjA4YWRiZjg5MzdlZmE1MDliIn0sImlhdCI6MTYzOTU2MzY2NX0.OSYsjyWNp-WqLa1dSw1ZXsgnDjgTZ0Wm5nBZwyUM1e8'\n      }\n    }); // console.log(await response.json()); \n\n    setNotes(await response.json());\n  };\n\n  const [notes, setNotes] = useState(notesVal);\n\n  const addNote = (title, description, tag) => {\n    const note = {\n      \"_id\": \"61b9c326fc5c191451cad2296\",\n      \"user\": \"61b86eb08adbf8937efa509b\",\n      \"title\": title,\n      \"description\": description,\n      \"tag\": tag,\n      \"date\": \"2021-12-15T10:27:50.438Z\",\n      \"__v\": 0\n    };\n    setNotes(notes.concat(note));\n  };\n\n  const deleteNote = id => {\n    // const newNotes = notes.filter((note)=>{return note._id!==id})\n    const newNotes = [];\n    notes.map(note => {\n      if (note._id !== id) newNotes.push(note);\n      return newNotes;\n    });\n    setNotes(newNotes);\n  };\n\n  const editNote = (id, title, description, tag) => {\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n\n    notes.map(note => {\n      if (note._id === id) note.title = title;\n      note.description = description;\n      note.tag = tag;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"h/Kwq8APw2qnBKvO5kM7028lg14=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["D:/React/inotebook/src/Context/Notes/NoteState.js"],"names":["NoteContext","useState","NoteState","props","host","notesVal","getNotes","response","fetch","method","headers","setNotes","json","notes","addNote","title","description","tag","note","concat","deleteNote","id","newNotes","map","_id","push","editNote","index","length","element","children"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,IAAI,GAAG,uBAAb;AAEA,QAAMC,QAAQ,GAAG,EAAjB;;AAEA,QAAMC,QAAQ,GAAG,YAAS;AACxB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAG,GAAEJ,IAAK,0BAAV,EAAsC;AAChEK,MAAAA,MAAM,EAAE,KADwD;AACjD;AACfC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,sBAAc;AAFP;AAFuD,KAAtC,CAA5B,CADwB,CAQxB;;AACAC,IAAAA,QAAQ,CAAC,MAAMJ,QAAQ,CAACK,IAAT,EAAP,CAAR;AACD,GAVD;;AAYA,QAAM,CAACC,KAAD,EAAQF,QAAR,IAAoBV,QAAQ,CAACI,QAAD,CAAlC;;AAEA,QAAMS,OAAO,GAAG,CAACC,KAAD,EAAQC,WAAR,EAAqBC,GAArB,KAA6B;AAC3C,UAAMC,IAAI,GAAG;AACX,aAAO,2BADI;AAEX,cAAQ,0BAFG;AAGX,eAASH,KAHE;AAIX,qBAAeC,WAJJ;AAKX,aAAOC,GALI;AAMX,cAAQ,0BANG;AAOX,aAAO;AAPI,KAAb;AAUAN,IAAAA,QAAQ,CAACE,KAAK,CAACM,MAAN,CAAaD,IAAb,CAAD,CAAR;AACD,GAZD;;AAcA,QAAME,UAAU,GAAIC,EAAD,IAAM;AACvB;AACA,UAAMC,QAAQ,GAAG,EAAjB;AACAT,IAAAA,KAAK,CAACU,GAAN,CAAWL,IAAD,IAAQ;AAChB,UAAGA,IAAI,CAACM,GAAL,KAAWH,EAAd,EACEC,QAAQ,CAACG,IAAT,CAAcP,IAAd;AAEF,aAAOI,QAAP;AACD,KALD;AAMAX,IAAAA,QAAQ,CAACW,QAAD,CAAR;AACD,GAVD;;AAYA,QAAMI,QAAQ,GAAG,CAACL,EAAD,EAAKN,KAAL,EAAYC,WAAZ,EAAyBC,GAAzB,KAA+B;AAC9C,SAAK,IAAIU,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGd,KAAK,CAACe,MAAlC,EAA0CD,KAAK,EAA/C,EAAmD;AACjD,YAAME,OAAO,GAAGhB,KAAK,CAACc,KAAD,CAArB;;AACA,UAAGE,OAAO,CAACL,GAAR,KAAgBH,EAAnB,EAAsB;AACpBQ,QAAAA,OAAO,CAACd,KAAR,GAAgBA,KAAhB;AACAc,QAAAA,OAAO,CAACb,WAAR,GAAsBA,WAAtB;AACAa,QAAAA,OAAO,CAACZ,GAAR,GAAcA,GAAd;AACD;AAEF;;AACDJ,IAAAA,KAAK,CAACU,GAAN,CAAWL,IAAD,IAAQ;AAChB,UAAGA,IAAI,CAACM,GAAL,KAAWH,EAAd,EACEH,IAAI,CAACH,KAAL,GAAaA,KAAb;AACAG,MAAAA,IAAI,CAACF,WAAL,GAAmBA,WAAnB;AACAE,MAAAA,IAAI,CAACD,GAAL,GAAWA,GAAX;AACH,KALD;AAMD,GAhBD;;AAkBA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,KAAF;AAASC,MAAAA,OAAT;AAAkBM,MAAAA,UAAlB;AAA8BM,MAAAA,QAA9B;AAAwCpB,MAAAA;AAAxC,KAA7B;AAAA,cACGH,KAAK,CAAC2B;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAlFD;;GAAM5B,S;;KAAAA,S;AAoFN,eAAeA,SAAf","sourcesContent":["import NoteContext from \"./NoteContext\";\r\nimport { useState } from \"react\";\r\n\r\nconst NoteState = (props) => {\r\n  // const s1 = {\r\n  //     \"name\": \"Nakshatra\",\r\n  //     \"branch\": \"cse\"\r\n  // }\r\n  // const [state, setState] = useState(s1);\r\n  // const update = ()=>{\r\n  //     setTimeout(() => {\r\n  //         setState({\r\n  //             \"name\": \"Tanu\",\r\n  //             \"branch\": \"It\"\r\n  //         })\r\n  //     }, 1000);\r\n  // }\r\n\r\n  const host = \"http://localhost:5000\"\r\n\r\n  const notesVal = []\r\n\r\n  const getNotes = async()=>{\r\n    const response = await fetch( `${host}/api/notes/fetchallnotes` , {\r\n      method: 'GET', // *GET, POST, PUT, DELETE, etc.\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjFiODZlYjA4YWRiZjg5MzdlZmE1MDliIn0sImlhdCI6MTYzOTU2MzY2NX0.OSYsjyWNp-WqLa1dSw1ZXsgnDjgTZ0Wm5nBZwyUM1e8'\r\n      },\r\n    }); \r\n    // console.log(await response.json()); \r\n    setNotes(await response.json()); \r\n  }\r\n\r\n  const [notes, setNotes] = useState(notesVal);\r\n\r\n  const addNote = (title, description, tag) => {\r\n    const note = {\r\n      \"_id\": \"61b9c326fc5c191451cad2296\",\r\n      \"user\": \"61b86eb08adbf8937efa509b\",\r\n      \"title\": title,\r\n      \"description\": description,\r\n      \"tag\": tag,\r\n      \"date\": \"2021-12-15T10:27:50.438Z\",\r\n      \"__v\": 0\r\n    }\r\n\r\n    setNotes(notes.concat(note))\r\n  }\r\n\r\n  const deleteNote = (id)=>{\r\n    // const newNotes = notes.filter((note)=>{return note._id!==id})\r\n    const newNotes = [];\r\n    notes.map((note)=>{\r\n      if(note._id!==id)\r\n        newNotes.push(note)\r\n\r\n      return newNotes\r\n    })\r\n    setNotes(newNotes);\r\n  }\r\n  \r\n  const editNote = (id, title, description, tag)=>{\r\n    for (let index = 0; index < notes.length; index++) {\r\n      const element = notes[index];\r\n      if(element._id === id){\r\n        element.title = title;\r\n        element.description = description;\r\n        element.tag = tag;\r\n      }\r\n      \r\n    }\r\n    notes.map((note)=>{\r\n      if(note._id===id)\r\n        note.title = title\r\n        note.description = description\r\n        note.tag = tag\r\n    })\r\n  }\r\n\r\n  return (\r\n    <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, getNotes }}>\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NoteState;"]},"metadata":{},"sourceType":"module"}